# Generated from MakefileAmComment.g4 by ANTLR 4.10
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,177,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,1,1,1,1,2,1,2,5,2,38,8,2,10,2,12,2,41,
        9,2,1,3,1,3,4,3,45,8,3,11,3,12,3,46,1,4,1,4,1,4,3,4,52,8,4,1,5,1,
        5,1,5,1,5,3,5,58,8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,66,8,6,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,5,8,75,8,8,10,8,12,8,78,9,8,1,8,1,8,1,8,1,8,
        1,8,5,8,85,8,8,10,8,12,8,88,9,8,1,8,3,8,91,8,8,1,9,1,9,1,9,3,9,96,
        8,9,1,9,3,9,99,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,5,11,111,8,11,10,11,12,11,114,9,11,1,11,3,11,117,8,11,1,12,
        1,12,1,12,1,12,5,12,123,8,12,10,12,12,12,126,9,12,1,12,1,12,5,12,
        130,8,12,10,12,12,12,133,9,12,1,12,1,12,5,12,137,8,12,10,12,12,12,
        140,9,12,1,12,1,12,5,12,144,8,12,10,12,12,12,147,9,12,3,12,149,8,
        12,1,12,1,12,3,12,153,8,12,1,12,3,12,156,8,12,1,12,1,12,1,13,1,13,
        3,13,162,8,13,1,13,4,13,165,8,13,11,13,12,13,166,1,13,1,13,1,14,
        4,14,172,8,14,11,14,12,14,173,1,14,1,14,1,112,0,15,1,1,3,2,5,3,7,
        4,9,5,11,0,13,0,15,0,17,6,19,0,21,7,23,0,25,8,27,9,29,10,1,0,9,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,6,0,9,10,13,13,
        32,32,34,35,40,41,92,92,2,0,34,34,92,92,4,0,10,10,13,13,61,61,91,
        91,2,0,10,10,13,13,3,0,10,10,13,13,91,91,1,1,10,10,2,0,9,9,32,32,
        203,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,17,1,0,0,0,0,21,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        1,31,1,0,0,0,3,33,1,0,0,0,5,35,1,0,0,0,7,44,1,0,0,0,9,51,1,0,0,0,
        11,57,1,0,0,0,13,65,1,0,0,0,15,67,1,0,0,0,17,90,1,0,0,0,19,92,1,
        0,0,0,21,100,1,0,0,0,23,116,1,0,0,0,25,118,1,0,0,0,27,164,1,0,0,
        0,29,171,1,0,0,0,31,32,5,40,0,0,32,2,1,0,0,0,33,34,5,41,0,0,34,4,
        1,0,0,0,35,39,7,0,0,0,36,38,7,1,0,0,37,36,1,0,0,0,38,41,1,0,0,0,
        39,37,1,0,0,0,39,40,1,0,0,0,40,6,1,0,0,0,41,39,1,0,0,0,42,45,8,2,
        0,0,43,45,3,9,4,0,44,42,1,0,0,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,
        1,0,0,0,46,47,1,0,0,0,47,8,1,0,0,0,48,52,3,11,5,0,49,52,3,13,6,0,
        50,52,3,15,7,0,51,48,1,0,0,0,51,49,1,0,0,0,51,50,1,0,0,0,52,10,1,
        0,0,0,53,54,5,92,0,0,54,58,9,0,0,0,55,56,5,92,0,0,56,58,3,27,13,
        0,57,53,1,0,0,0,57,55,1,0,0,0,58,12,1,0,0,0,59,60,5,92,0,0,60,66,
        5,116,0,0,61,62,5,92,0,0,62,66,5,114,0,0,63,64,5,92,0,0,64,66,5,
        110,0,0,65,59,1,0,0,0,65,61,1,0,0,0,65,63,1,0,0,0,66,14,1,0,0,0,
        67,68,5,92,0,0,68,69,5,59,0,0,69,16,1,0,0,0,70,76,5,34,0,0,71,75,
        8,3,0,0,72,75,3,9,4,0,73,75,3,19,9,0,74,71,1,0,0,0,74,72,1,0,0,0,
        74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,79,1,
        0,0,0,78,76,1,0,0,0,79,91,5,34,0,0,80,86,5,39,0,0,81,85,8,3,0,0,
        82,85,3,9,4,0,83,85,3,19,9,0,84,81,1,0,0,0,84,82,1,0,0,0,84,83,1,
        0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,
        86,1,0,0,0,89,91,5,39,0,0,90,70,1,0,0,0,90,80,1,0,0,0,91,18,1,0,
        0,0,92,98,5,92,0,0,93,95,5,13,0,0,94,96,5,10,0,0,95,94,1,0,0,0,95,
        96,1,0,0,0,96,99,1,0,0,0,97,99,5,10,0,0,98,93,1,0,0,0,98,97,1,0,
        0,0,99,20,1,0,0,0,100,101,5,91,0,0,101,102,3,23,11,0,102,103,5,93,
        0,0,103,22,1,0,0,0,104,105,5,61,0,0,105,106,3,23,11,0,106,107,5,
        61,0,0,107,117,1,0,0,0,108,112,5,91,0,0,109,111,9,0,0,0,110,109,
        1,0,0,0,111,114,1,0,0,0,112,113,1,0,0,0,112,110,1,0,0,0,113,115,
        1,0,0,0,114,112,1,0,0,0,115,117,5,93,0,0,116,104,1,0,0,0,116,108,
        1,0,0,0,117,24,1,0,0,0,118,148,5,35,0,0,119,149,1,0,0,0,120,124,
        5,91,0,0,121,123,5,61,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,
        1,0,0,0,124,125,1,0,0,0,125,149,1,0,0,0,126,124,1,0,0,0,127,131,
        5,91,0,0,128,130,5,61,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,
        1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,138,
        8,4,0,0,135,137,8,5,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,
        1,0,0,0,138,139,1,0,0,0,139,149,1,0,0,0,140,138,1,0,0,0,141,145,
        8,6,0,0,142,144,8,5,0,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,
        1,0,0,0,145,146,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,148,119,
        1,0,0,0,148,120,1,0,0,0,148,127,1,0,0,0,148,141,1,0,0,0,149,155,
        1,0,0,0,150,152,5,13,0,0,151,153,5,10,0,0,152,151,1,0,0,0,152,153,
        1,0,0,0,153,156,1,0,0,0,154,156,7,7,0,0,155,150,1,0,0,0,155,154,
        1,0,0,0,156,157,1,0,0,0,157,158,6,12,0,0,158,26,1,0,0,0,159,161,
        5,13,0,0,160,162,5,10,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,165,
        1,0,0,0,163,165,5,10,0,0,164,159,1,0,0,0,164,163,1,0,0,0,165,166,
        1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,169,
        6,13,1,0,169,28,1,0,0,0,170,172,7,8,0,0,171,170,1,0,0,0,172,173,
        1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,
        6,14,1,0,176,30,1,0,0,0,27,0,39,44,46,51,57,65,74,76,84,86,90,95,
        98,112,116,124,131,138,145,148,152,155,161,164,166,173,2,0,1,0,6,
        0,0
    ]

class MakefileAmCommentLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    Identifier = 3
    Unquoted_argument = 4
    Escape_sequence = 5
    Quoted_argument = 6
    Bracket_argument = 7
    Line_comment = 8
    Newline = 9
    Space = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "Identifier", "Unquoted_argument", "Escape_sequence", "Quoted_argument", 
            "Bracket_argument", "Line_comment", "Newline", "Space" ]

    ruleNames = [ "T__0", "T__1", "Identifier", "Unquoted_argument", "Escape_sequence", 
                  "Escape_identity", "Escape_encoded", "Escape_semicolon", 
                  "Quoted_argument", "Quoted_cont", "Bracket_argument", 
                  "Bracket_arg_nested", "Line_comment", "Newline", "Space" ]

    grammarFileName = "MakefileAmComment.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


